// @generated by protoc-gen-es v1.1.1
// @generated from file musicservice/v1/artists.proto (package musicservice, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { FieldMask, proto3 } from "@bufbuild/protobuf";
import { Artist } from "./models_pb.js";

/**
 *
 * Artist creation request object
 *
 * @generated from message musicservice.CreateArtistRequest
 */
export const CreateArtistRequest = proto3.makeMessageType(
  "musicservice.CreateArtistRequest",
  () => [
    { no: 1, name: "artist", kind: "message", T: Artist },
  ],
);

/**
 *
 * Response of an artist creation.
 *
 * @generated from message musicservice.CreateArtistResponse
 */
export const CreateArtistResponse = proto3.makeMessageType(
  "musicservice.CreateArtistResponse",
  () => [
    { no: 1, name: "artist", kind: "message", T: Artist },
  ],
);

/**
 *
 * The request for (partially) updating an Artist.
 *
 * @generated from message musicservice.UpdateArtistRequest
 */
export const UpdateArtistRequest = proto3.makeMessageType(
  "musicservice.UpdateArtistRequest",
  () => [
    { no: 1, name: "artist", kind: "message", T: Artist },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ],
);

/**
 *
 * The request for (partially) updating an Artist.
 *
 * @generated from message musicservice.UpdateArtistResponse
 */
export const UpdateArtistResponse = proto3.makeMessageType(
  "musicservice.UpdateArtistResponse",
  () => [
    { no: 1, name: "artist", kind: "message", T: Artist },
  ],
);

/**
 *
 * Batch gets multiple artists.
 *
 * @generated from message musicservice.GetArtistsRequest
 */
export const GetArtistsRequest = proto3.makeMessageType(
  "musicservice.GetArtistsRequest",
  () => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 *
 * Response for an artist batch get.
 *
 * @generated from message musicservice.GetArtistsResponse
 */
export const GetArtistsResponse = proto3.makeMessageType(
  "musicservice.GetArtistsResponse",
  () => [
    { no: 1, name: "artists", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Artist} },
  ],
);

/**
 *
 * An artist search request.  For now only paginations params are provided.
 *
 * @generated from message musicservice.ListArtistsRequest
 */
export const ListArtistsRequest = proto3.makeMessageType(
  "musicservice.ListArtistsRequest",
  () => [
    { no: 1, name: "page_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 *
 * Response of a artist search/listing.
 *
 * @generated from message musicservice.ListArtistsResponse
 */
export const ListArtistsResponse = proto3.makeMessageType(
  "musicservice.ListArtistsResponse",
  () => [
    { no: 1, name: "artists", kind: "message", T: Artist, repeated: true },
    { no: 2, name: "next_page_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 *
 * Request to delete an artist.
 *
 * @generated from message musicservice.DeleteArtistRequest
 */
export const DeleteArtistRequest = proto3.makeMessageType(
  "musicservice.DeleteArtistRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 *
 * Artist deletion response
 *
 * @generated from message musicservice.DeleteArtistResponse
 */
export const DeleteArtistResponse = proto3.makeMessageType(
  "musicservice.DeleteArtistResponse",
  [],
);

