# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from musicservice.v1 import songs_pb2 as musicservice_dot_v1_dot_songs__pb2


class SongServiceStub(object):
    """
    Song service for creating, listing, updating and deleting songs.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSong = channel.unary_unary(
                '/musicservice.SongService/CreateSong',
                request_serializer=musicservice_dot_v1_dot_songs__pb2.CreateSongRequest.SerializeToString,
                response_deserializer=musicservice_dot_v1_dot_songs__pb2.CreateSongResponse.FromString,
                )
        self.GetSongs = channel.unary_unary(
                '/musicservice.SongService/GetSongs',
                request_serializer=musicservice_dot_v1_dot_songs__pb2.GetSongsRequest.SerializeToString,
                response_deserializer=musicservice_dot_v1_dot_songs__pb2.GetSongsResponse.FromString,
                )
        self.UpdateSong = channel.unary_unary(
                '/musicservice.SongService/UpdateSong',
                request_serializer=musicservice_dot_v1_dot_songs__pb2.UpdateSongRequest.SerializeToString,
                response_deserializer=musicservice_dot_v1_dot_songs__pb2.UpdateSongResponse.FromString,
                )
        self.DeleteSong = channel.unary_unary(
                '/musicservice.SongService/DeleteSong',
                request_serializer=musicservice_dot_v1_dot_songs__pb2.DeleteSongRequest.SerializeToString,
                response_deserializer=musicservice_dot_v1_dot_songs__pb2.DeleteSongResponse.FromString,
                )
        self.ListSongs = channel.unary_unary(
                '/musicservice.SongService/ListSongs',
                request_serializer=musicservice_dot_v1_dot_songs__pb2.ListSongsRequest.SerializeToString,
                response_deserializer=musicservice_dot_v1_dot_songs__pb2.ListSongsResponse.FromString,
                )


class SongServiceServicer(object):
    """
    Song service for creating, listing, updating and deleting songs.
    """

    def CreateSong(self, request, context):
        """
        Create a new Song
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSongs(self, request, context):
        """
        Batch gets multiple songs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSong(self, request, context):
        """
        Updates specific fields of an Song
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSong(self, request, context):
        """
        Deletes an song from our system.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSongs(self, request, context):
        """
        Finds and retrieves songs matching the particular criteria.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SongServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateSong': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSong,
                    request_deserializer=musicservice_dot_v1_dot_songs__pb2.CreateSongRequest.FromString,
                    response_serializer=musicservice_dot_v1_dot_songs__pb2.CreateSongResponse.SerializeToString,
            ),
            'GetSongs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSongs,
                    request_deserializer=musicservice_dot_v1_dot_songs__pb2.GetSongsRequest.FromString,
                    response_serializer=musicservice_dot_v1_dot_songs__pb2.GetSongsResponse.SerializeToString,
            ),
            'UpdateSong': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSong,
                    request_deserializer=musicservice_dot_v1_dot_songs__pb2.UpdateSongRequest.FromString,
                    response_serializer=musicservice_dot_v1_dot_songs__pb2.UpdateSongResponse.SerializeToString,
            ),
            'DeleteSong': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSong,
                    request_deserializer=musicservice_dot_v1_dot_songs__pb2.DeleteSongRequest.FromString,
                    response_serializer=musicservice_dot_v1_dot_songs__pb2.DeleteSongResponse.SerializeToString,
            ),
            'ListSongs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSongs,
                    request_deserializer=musicservice_dot_v1_dot_songs__pb2.ListSongsRequest.FromString,
                    response_serializer=musicservice_dot_v1_dot_songs__pb2.ListSongsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'musicservice.SongService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SongService(object):
    """
    Song service for creating, listing, updating and deleting songs.
    """

    @staticmethod
    def CreateSong(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/musicservice.SongService/CreateSong',
            musicservice_dot_v1_dot_songs__pb2.CreateSongRequest.SerializeToString,
            musicservice_dot_v1_dot_songs__pb2.CreateSongResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSongs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/musicservice.SongService/GetSongs',
            musicservice_dot_v1_dot_songs__pb2.GetSongsRequest.SerializeToString,
            musicservice_dot_v1_dot_songs__pb2.GetSongsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSong(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/musicservice.SongService/UpdateSong',
            musicservice_dot_v1_dot_songs__pb2.UpdateSongRequest.SerializeToString,
            musicservice_dot_v1_dot_songs__pb2.UpdateSongResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSong(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/musicservice.SongService/DeleteSong',
            musicservice_dot_v1_dot_songs__pb2.DeleteSongRequest.SerializeToString,
            musicservice_dot_v1_dot_songs__pb2.DeleteSongResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSongs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/musicservice.SongService/ListSongs',
            musicservice_dot_v1_dot_songs__pb2.ListSongsRequest.SerializeToString,
            musicservice_dot_v1_dot_songs__pb2.ListSongsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
