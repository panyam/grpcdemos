# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from musicservice.v1 import labels_pb2 as musicservice_dot_v1_dot_labels__pb2


class LabelServiceStub(object):
    """
    Label service for creating, listing, updating and deleting labels.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateLabel = channel.unary_unary(
                '/musicservice.v1.LabelService/CreateLabel',
                request_serializer=musicservice_dot_v1_dot_labels__pb2.CreateLabelRequest.SerializeToString,
                response_deserializer=musicservice_dot_v1_dot_labels__pb2.CreateLabelResponse.FromString,
                )
        self.GetLabels = channel.unary_unary(
                '/musicservice.v1.LabelService/GetLabels',
                request_serializer=musicservice_dot_v1_dot_labels__pb2.GetLabelsRequest.SerializeToString,
                response_deserializer=musicservice_dot_v1_dot_labels__pb2.GetLabelsResponse.FromString,
                )
        self.UpdateLabel = channel.unary_unary(
                '/musicservice.v1.LabelService/UpdateLabel',
                request_serializer=musicservice_dot_v1_dot_labels__pb2.UpdateLabelRequest.SerializeToString,
                response_deserializer=musicservice_dot_v1_dot_labels__pb2.UpdateLabelResponse.FromString,
                )
        self.DeleteLabel = channel.unary_unary(
                '/musicservice.v1.LabelService/DeleteLabel',
                request_serializer=musicservice_dot_v1_dot_labels__pb2.DeleteLabelRequest.SerializeToString,
                response_deserializer=musicservice_dot_v1_dot_labels__pb2.DeleteLabelResponse.FromString,
                )
        self.ListLabels = channel.unary_unary(
                '/musicservice.v1.LabelService/ListLabels',
                request_serializer=musicservice_dot_v1_dot_labels__pb2.ListLabelsRequest.SerializeToString,
                response_deserializer=musicservice_dot_v1_dot_labels__pb2.ListLabelsResponse.FromString,
                )
        self.AddAlbum = channel.unary_unary(
                '/musicservice.v1.LabelService/AddAlbum',
                request_serializer=musicservice_dot_v1_dot_labels__pb2.AddAlbumRequest.SerializeToString,
                response_deserializer=musicservice_dot_v1_dot_labels__pb2.AddAlbumResponse.FromString,
                )
        self.RemoveAlbum = channel.unary_unary(
                '/musicservice.v1.LabelService/RemoveAlbum',
                request_serializer=musicservice_dot_v1_dot_labels__pb2.RemoveAlbumRequest.SerializeToString,
                response_deserializer=musicservice_dot_v1_dot_labels__pb2.RemoveAlbumResponse.FromString,
                )
        self.ListAlbums = channel.unary_unary(
                '/musicservice.v1.LabelService/ListAlbums',
                request_serializer=musicservice_dot_v1_dot_labels__pb2.LabelServiceListAlbumsRequest.SerializeToString,
                response_deserializer=musicservice_dot_v1_dot_labels__pb2.LabelServiceListAlbumsResponse.FromString,
                )


class LabelServiceServicer(object):
    """
    Label service for creating, listing, updating and deleting labels.
    """

    def CreateLabel(self, request, context):
        """
        Create a new Label
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLabels(self, request, context):
        """
        Batch gets multiple labels.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateLabel(self, request, context):
        """
        Updates specific fields of an Label
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteLabel(self, request, context):
        """
        Deletes an label from our system.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLabels(self, request, context):
        """
        Finds and retrieves labels matching the particular criteria.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddAlbum(self, request, context):
        """
        Add an album to this label.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveAlbum(self, request, context):
        """
        Remove an album from this label.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAlbums(self, request, context):
        """
        List all albums owned by this label.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LabelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateLabel,
                    request_deserializer=musicservice_dot_v1_dot_labels__pb2.CreateLabelRequest.FromString,
                    response_serializer=musicservice_dot_v1_dot_labels__pb2.CreateLabelResponse.SerializeToString,
            ),
            'GetLabels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLabels,
                    request_deserializer=musicservice_dot_v1_dot_labels__pb2.GetLabelsRequest.FromString,
                    response_serializer=musicservice_dot_v1_dot_labels__pb2.GetLabelsResponse.SerializeToString,
            ),
            'UpdateLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateLabel,
                    request_deserializer=musicservice_dot_v1_dot_labels__pb2.UpdateLabelRequest.FromString,
                    response_serializer=musicservice_dot_v1_dot_labels__pb2.UpdateLabelResponse.SerializeToString,
            ),
            'DeleteLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteLabel,
                    request_deserializer=musicservice_dot_v1_dot_labels__pb2.DeleteLabelRequest.FromString,
                    response_serializer=musicservice_dot_v1_dot_labels__pb2.DeleteLabelResponse.SerializeToString,
            ),
            'ListLabels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLabels,
                    request_deserializer=musicservice_dot_v1_dot_labels__pb2.ListLabelsRequest.FromString,
                    response_serializer=musicservice_dot_v1_dot_labels__pb2.ListLabelsResponse.SerializeToString,
            ),
            'AddAlbum': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAlbum,
                    request_deserializer=musicservice_dot_v1_dot_labels__pb2.AddAlbumRequest.FromString,
                    response_serializer=musicservice_dot_v1_dot_labels__pb2.AddAlbumResponse.SerializeToString,
            ),
            'RemoveAlbum': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveAlbum,
                    request_deserializer=musicservice_dot_v1_dot_labels__pb2.RemoveAlbumRequest.FromString,
                    response_serializer=musicservice_dot_v1_dot_labels__pb2.RemoveAlbumResponse.SerializeToString,
            ),
            'ListAlbums': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAlbums,
                    request_deserializer=musicservice_dot_v1_dot_labels__pb2.LabelServiceListAlbumsRequest.FromString,
                    response_serializer=musicservice_dot_v1_dot_labels__pb2.LabelServiceListAlbumsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'musicservice.v1.LabelService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LabelService(object):
    """
    Label service for creating, listing, updating and deleting labels.
    """

    @staticmethod
    def CreateLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/musicservice.v1.LabelService/CreateLabel',
            musicservice_dot_v1_dot_labels__pb2.CreateLabelRequest.SerializeToString,
            musicservice_dot_v1_dot_labels__pb2.CreateLabelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLabels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/musicservice.v1.LabelService/GetLabels',
            musicservice_dot_v1_dot_labels__pb2.GetLabelsRequest.SerializeToString,
            musicservice_dot_v1_dot_labels__pb2.GetLabelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/musicservice.v1.LabelService/UpdateLabel',
            musicservice_dot_v1_dot_labels__pb2.UpdateLabelRequest.SerializeToString,
            musicservice_dot_v1_dot_labels__pb2.UpdateLabelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/musicservice.v1.LabelService/DeleteLabel',
            musicservice_dot_v1_dot_labels__pb2.DeleteLabelRequest.SerializeToString,
            musicservice_dot_v1_dot_labels__pb2.DeleteLabelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListLabels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/musicservice.v1.LabelService/ListLabels',
            musicservice_dot_v1_dot_labels__pb2.ListLabelsRequest.SerializeToString,
            musicservice_dot_v1_dot_labels__pb2.ListLabelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddAlbum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/musicservice.v1.LabelService/AddAlbum',
            musicservice_dot_v1_dot_labels__pb2.AddAlbumRequest.SerializeToString,
            musicservice_dot_v1_dot_labels__pb2.AddAlbumResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveAlbum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/musicservice.v1.LabelService/RemoveAlbum',
            musicservice_dot_v1_dot_labels__pb2.RemoveAlbumRequest.SerializeToString,
            musicservice_dot_v1_dot_labels__pb2.RemoveAlbumResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAlbums(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/musicservice.v1.LabelService/ListAlbums',
            musicservice_dot_v1_dot_labels__pb2.LabelServiceListAlbumsRequest.SerializeToString,
            musicservice_dot_v1_dot_labels__pb2.LabelServiceListAlbumsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
